name: "build ansible alpine CI workflow"


on:
  push:
    branches: [ test ]

jobs:


  alpine-latest-job:
    name: "ansible latest alpine docker ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "latest"
      name: "alpine/ansible"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.alpine.latest"
      playbookname: "playbook-alpine.yml"
      DOCKER_REPO: "dockerfoam"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build alpine latest"
      run: |
        docker build --build-arg VCS_REF=`git rev-parse --short HEAD` \
             --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
             --build-arg ANSIBLE_VERSION=${ANSIBLE_VERSION:=4.6.0} \
             --build-arg ANSIBLE_LINT_VERSION=${ANSIBLE_LINT_VERSION:=5.1.3} \
             -t ${IMAGE_NAME:=githubfoam/ansible-alpine:4.6.0} .
        docker tag githubfoam/ansible-alpine:4.6.0 githubfoam/ansible-alpine:latest
    # - name: "docker push alpine"
    #   run: |
    #     docker tag ${IMAGE_NAME} ${DOCKER_REPO}:${ANSIBLE_VERSION}
    #     docker push $DOCKER_REPO:${ANSIBLE_VERSION}                 

  alpine-job:
    name: "docker alpine ansible ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "4.1.0"
      name: "alpine/ansible"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.alpine"
      playbookname: "playbook-alpine.yml"
      DOCKER_REPO: "dockerfoam"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build alpine"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        docker build --build-arg VCS_REF=`git rev-parse --short HEAD` \
             --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
             --build-arg ANSIBLE_VERSION=${ANSIBLE_VERSION:=2.9.26} \
             --build-arg ANSIBLE_LINT_VERSION=${ANSIBLE_LINT_VERSION:=5.1.3} \
             --build-arg MITOGEN_VERSION=${MITOGEN_VERSION:=0.2.9} \
             -t ${IMAGE_NAME:=githubfoam/ansible-alpine:2.9.26} .
        docker image ls
    # - name: "docker push alpine"
    #   run: |
    #     docker tag ${IMAGE_NAME} ${DOCKER_REPO}:${ANSIBLE_VERSION}
    #     docker push $DOCKER_REPO:${ANSIBLE_VERSION}         