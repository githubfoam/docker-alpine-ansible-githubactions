name: "alpine latest ansible local CI workflow"


on:
  push:
    branches: [ test ]

jobs:


  alpine-latest-job:
    name: "docker alpine ansible ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "4.1.0"
      name: "alpine/ansible"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.alpine.latest"
      playbookname: "playbook-alpine.yml"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build alpine"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version}
        docker system df -v               
        docker image inspect ${name}:${version}
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname} --syntax-check
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname} --check #dry-run
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname}
                 
