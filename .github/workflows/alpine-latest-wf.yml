name: "alpine latest ansible local CI workflow"


on:
  push:
    branches: [ test ]

jobs:
  alpine-latest-job:
    name: "docker alpine ansible ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "4.1.0"
      name: "alpine/ansible"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.alpine.kali-tools-forensics"
      playbookname: "playbook-alpine.yml"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build alpine"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version}
        docker system df -v               
        docker image inspect ${name}:${version}
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname} --syntax-check
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname} --check #dry-run
        sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name}:${version} ansible-playbook -vvv /home/ansible/playbooks/${playbookname}
                         

  # alpine-2004-job:
  #   name: "docker archlinux ansible 20.04"
  #   runs-on: alpine-latest
  #   env:
  #     distribution: "alpine" #https://hub.docker.com/_/alpine
  #     version: "latest"
  #     name: "alpine2104:ansible"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build alpine 21.04"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t alpine2104:ansible . --file dockerfiles/Dockerfile.alpine2104
  #       docker image ls
  #       docker image history alpine2104:ansible
  #       docker system df -v               
  #       docker image inspect alpine2104:ansible
  #   - name: "playbook docker alpine 21.04"
  #     run: |
  #         # destroyed afterwards (use --rm )
  #         # all subsequent Dockerfile commands generate new images and the cache is not used
  #         sudo docker build --no-cache --rm  -t alpine2104:ansible . --file dockerfiles/Dockerfile.alpine2104
  #         sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml --syntax-check
  #         sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml --check #dry-run
  #         sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml
  
     
        


  alpine-1804-job:
    name: "docker archlinux ansible  alpine 21.04"
    runs-on: alpine-18.04
    env:
      distribution: "alpine" #https://hub.docker.com/_/alpine
      version: "latest"
      name: "alpine2104:ansible"    
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch    
    - name: "docker build alpine 21.04"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t alpine2104:ansible . --file dockerfiles/Dockerfile.alpine2104
        docker image ls
        docker image history alpine2104:ansible
        docker system df -v               
        docker image inspect alpine2104:ansible
    - name: "playbook docker alpine 21.04"
      run: |
          # destroyed afterwards (use --rm )
          # all subsequent Dockerfile commands generate new images and the cache is not used
          sudo docker build --no-cache --rm  -t alpine2104:ansible . --file dockerfiles/Dockerfile.alpine2104
          sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml --syntax-check
          sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml --check #dry-run
          sudo docker run -e ANSIBLE_FORCE_COLOR=1 --privileged --volume="${PWD}":/home/ansible:ro ${name} ansible-playbook -vvv /home/ansible/playbooks/playbook.yml
  



